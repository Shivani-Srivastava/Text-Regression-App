"0",""
"0","# +++ defining a purely clean_text op"
"0","clean_text <- function(text, lower=FALSE, alphanum=FALSE, drop_num=FALSE){"
"0","  text  =  str_replace_all(text, ""<.*?>"", "" "")   # drop html junk"
"0","  "
"0","  if (lower==""TRUE"") {text = text %>% str_to_lower()}"
"0","  if (alphanum==""TRUE"") {text = text %>% str_replace_all(""[^[:alnum:]]"", "" "")}"
"0","  if (drop_num==""TRUE"") {text = text %>% str_replace_all(""[:digit:]"", """")}"
"0","  "
"0","  # collapse multiple spaces"
"0","  text = text %>%   "
"0","    str_replace_all(""\\\\s+"", "" "")  "
"0","  "
"0","  return(text) } # clean_text() ends"
"0",""
"0","### +++ new func to cast DTMs outta processed corpora +++ ###"
"0","casting_dtm <- function(text_as_df,    	 # text_as_df is single df colm "
"0","                        tfidf=FALSE,     "
"0","                        use.stopwords=TRUE,    # whether to use stopwords at all "
"0","                        additional.stopwords=NULL){ # any additional stopwords?"
"0","  "
"0","  ## tokenizing the corpus"
"0","  textdf1 = text_as_df %>% "
"0","    mutate(docID = row_number()) %>%    # row_number() is v useful.    "
"0","    group_by(docID) %>%"
"0","    unnest_tokens(word, text) %>%"
"0","    count(word, sort = TRUE) %>% ungroup()"
"0","  "
"0","  ## make stop.words list"
"0","  stop.words = data.frame(word = as.character(unique(c(additional.stopwords, stop_words$word))),"
"0","                          stringsAsFactors=FALSE)	"
"0","  "
"0","  if (use.stopwords == ""TRUE""){ textdf1 = textdf1 %>% anti_join(stop.words) }"
"0","  "
"0","  ## cast into a Matrix object"
"0","  if (tfidf == ""TRUE"") {"
"0","    textdf2 = textdf1 %>% group_by(docID) %>% "
"0","      count(word, sort=TRUE) %>% ungroup() %>%"
"0","      bind_tf_idf(word, docID, n) %>% "
"0","      rename(value = tf_idf)"
"0","  } else { "
"0","      textdf2 = textdf1 %>% rename(value = n)  }"
"0","  "
"0","  m <- textdf2 %>% cast_sparse(docID, word, value); dim(m)"
"0","  "
"0","  # reorder dtm to have sorted rows by doc_num and cols by colsums	"
"0","  m = m[order(as.numeric(rownames(m))),]    # reorder rows	"
"0","  b0 = apply(m, 2, sum) %>% order(decreasing = TRUE)"
"0","  m = m[, b0]"
"0","  "
"0","  # anomaly handling"
"0","  m = as.matrix(m)"
"0","  a5 = seq(1:nrow(text_as_df))"
"0","  a6 = !(a5 %in% rownames(m)); length(a6); a6[1:5]"
"0","  a7 = matrix(0, nrow=sum(a6), ncol=ncol(m))"
"0","  rownames(a7) = which(a6)"
"0","  colnames(a7) = colnames(m)"
"0","  a8 = rbind(m, a7); dim(a8); "
"0","  a9 = sort(as.numeric(rownames(a8)), decreasing=FALSE, index.return=TRUE)"
"0","  a8 = a8[a9$ix,]  # this is output. matrix"
"0","  "
"0","  return(a8) }    # func ends"
"0",""
"0",""
"0","### +++ new func to preprocess n prune DTMs +++ ###"
"0","preprocess_dtm <- function(dtm, min_occur = 0.02, max_occur = 0.95){"
"0","  "
"0","  a0 = apply(dtm, 2, sum) %>% as.numeric()"
"0","  min_thresh = quantile(a0, min_occur) %>% as.numeric(); min_thresh"
"0","  max_thresh = quantile(a0, max_occur) %>% as.numeric(); max_thresh"
"0","  a1 = (a0 > max_thresh | a0 < min_thresh); length(a1); sum(a1)"
"0","  dtm1 = dtm[,!a1]; dim(dtm1)"
"0","  return(dtm1)"
"0","  "
"0","} # func ends"
"0",""
